services:
  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: khanhduy
      POSTGRES_PASSWORD: khanhduy
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - default

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: khanhduy
      MONGO_INITDB_ROOT_PASSWORD: khanhduy
      MONGO_INITDB_DATABASE: plantdb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - default

  backend-service:
    container_name: backend-service
#    image: duyfoolish/backend-service:latest
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    env_file:
      - .env
    environment:
      DATABASE_HOST: host.docker.internal
      DATABASE_PORT: 5432
      LOGSTASH_HOST: host.docker.internal:5600
    depends_on:
      - postgres
    networks:
      - default

  elastic-search:
    image: elasticsearch:7.14.1
    container_name: elasticsearch
    restart: no
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
    networks:
      - default

  kibana:
    image: kibana:7.14.1
    container_name: kibana
    restart: no
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic-search:9200
    networks:
      - default

  logstash:
    image: logstash:7.14.1
    container_name: logstash
    restart: no
    ports:
      - "5600:5600" # Socket port
      - "5044:5044"
    #      - "9600:9600"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elastic-search:9200
      - XPACK_MONITORING_ENABLED=true
    networks:
      - default

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment: # account: grafana/password
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - '3000:3000'
    links:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana

#  jenkins:
#    image: jenkins/jenkins:lts
#    container_name: jenkins
#    restart: unless-stopped
#    ports:
#      - "7080:8080"  # Cổng Jenkins chính
#      - "50000:50000"  # Cổng cho JNLP agents (nếu cần)
#    volumes:
#      - jenkins_data:/var/jenkins_home  # Lưu trữ dữ liệu Jenkins
#    environment:
#      - DOCKER_HOST=tcp://host.docker.internal:2375
#    networks:
#      - default

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    user: root
    ports:
      - "7080:8080"
      - "50000:50000"
    environment:
      - DOCKER_HOST=tcp://host.docker.internal:2375
    volumes:
      - "jenkins_data:/var/jenkins_home"
    networks:
      - default
    command: >
      /bin/bash -c "apt-get update &&
                    apt-get install -y docker.io &&
                    exec /usr/local/bin/jenkins.sh"
  
  

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    restart: unless-stopped  # Thêm để đồng bộ với các service khác
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_USERNAME=khanhduy
      - SONAR_JDBC_PASSWORD=khanhduy
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - default

networks:
  default:
    name: backend-service

volumes:
  grafana:
  postgres:
  jenkins_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  mongodb_data:
